// <auto-generated />
using System;
using CarRepairServiceCode.Repository.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CarRepairServiceCode.Migrations
{
    [DbContext(typeof(CarRepairServiceDB_Context))]
    [Migration("20211021143500_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "English_United Kingdom.1252")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("car_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("car_name");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Colour")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("colour");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("VinNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("vin_number");

                    b.HasKey("CarId");

                    b.HasIndex("ClientId");

                    b.ToTable("car");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.CarOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("CarId")
                        .HasColumnType("integer")
                        .HasColumnName("car_id");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<decimal?>("OrderAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("order_amount")
                        .HasDefaultValueSql("0");

                    b.Property<string>("OrderComments")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("order_comments");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("OrderId")
                        .HasName("carorder_pkey");

                    b.HasIndex("CarId");

                    b.ToTable("car_order");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.CarOrderDetail", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_details_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.HasKey("OrderDetailsId")
                        .HasName("carorderdetails_pkey");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TaskId");

                    b.ToTable("car_order_details");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("last_name");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mobile_number");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<decimal?>("Wallet")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("wallet")
                        .HasDefaultValueSql("0");

                    b.HasKey("ClientId");

                    b.ToTable("client");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.EmpPosition", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("position_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("position_name");

                    b.HasKey("PositionId")
                        .HasName("empposition_pkey");

                    b.ToTable("emp_position");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employee_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EmpLogin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("emp_login");

                    b.Property<string>("EmpPassword")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("emp_password");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.HasKey("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.TaskCatalog", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("task_description");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("task_name");

                    b.Property<decimal?>("TaskPrice")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("task_price")
                        .HasDefaultValueSql("0");

                    b.HasKey("TaskId")
                        .HasName("taskcatalog_pkey");

                    b.ToTable("task_catalog");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.Car", b =>
                {
                    b.HasOne("CarRepairServiceCode.Repository.Models.Client", "Client")
                        .WithMany("Cars")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client_car")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.CarOrder", b =>
                {
                    b.HasOne("CarRepairServiceCode.Repository.Models.Car", "Car")
                        .WithMany("CarOrders")
                        .HasForeignKey("CarId")
                        .HasConstraintName("fk_carorder_carid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.CarOrderDetail", b =>
                {
                    b.HasOne("CarRepairServiceCode.Repository.Models.Employee", "Employee")
                        .WithMany("CarOrderDetails")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_carorderdetails_employee")
                        .IsRequired();

                    b.HasOne("CarRepairServiceCode.Repository.Models.CarOrder", "Order")
                        .WithMany("CarOrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_carorderdetails_carorder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRepairServiceCode.Repository.Models.TaskCatalog", "Task")
                        .WithMany("CarOrderDetails")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("fk_carorderdetails_taskcatalog")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Order");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.Employee", b =>
                {
                    b.HasOne("CarRepairServiceCode.Repository.Models.EmpPosition", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("fk_employee_position")
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.Car", b =>
                {
                    b.Navigation("CarOrders");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.CarOrder", b =>
                {
                    b.Navigation("CarOrderDetails");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.Client", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.EmpPosition", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.Employee", b =>
                {
                    b.Navigation("CarOrderDetails");
                });

            modelBuilder.Entity("CarRepairServiceCode.Repository.Models.TaskCatalog", b =>
                {
                    b.Navigation("CarOrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
